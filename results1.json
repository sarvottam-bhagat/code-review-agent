{"pr_number":2189,"repo_url":"https://github.com/mem0ai/mem0","files":[{"name":"mem0/vector_stores/azure_ai_search.py","issues":[{"type":"style","line":29,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":48,"description":"Line contains trailing whitespace","suggestion":"Remove trailing whitespace","severity":"low","analyzer":"style"},{"type":"style","line":59,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":60,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":61,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":62,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":68,"description":"Line contains trailing whitespace","suggestion":"Remove trailing whitespace","severity":"low","analyzer":"style"},{"type":"style","line":81,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":82,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":94,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":99,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":108,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":112,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":115,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":118,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":119,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":123,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":124,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":125,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":129,"description":"Line contains trailing whitespace","suggestion":"Remove trailing whitespace","severity":"low","analyzer":"style"},{"type":"style","line":133,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":141,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":144,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":147,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":158,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":165,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":168,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":176,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":195,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":202,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":203,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":220,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":228,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":241,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":242,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":245,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":246,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":266,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":269,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":323,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":340,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"bug","line":27,"description":"Potential use of undefined variable 'ImportError'","suggestion":"Ensure 'ImportError' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":28,"description":"Potential use of undefined variable 'ImportError'","suggestion":"Ensure 'ImportError' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":32,"description":"Potential use of undefined variable '__name__'","suggestion":"Ensure '__name__' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":36,"description":"Potential use of undefined variable 'str'","suggestion":"Ensure 'str' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":37,"description":"Potential use of undefined variable 'float'","suggestion":"Ensure 'float' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":38,"description":"Potential use of undefined variable 'dict'","suggestion":"Ensure 'dict' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":48,"description":"Potential use of undefined variable 'str'","suggestion":"Ensure 'str' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":49,"description":"Potential use of undefined variable 'bool'","suggestion":"Ensure 'bool' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":168,"description":"Potential use of undefined variable 'len'","suggestion":"Ensure 'len' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":170,"description":"Potential use of undefined variable 'vector'","suggestion":"Ensure 'vector' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":170,"description":"Potential use of undefined variable 'payload'","suggestion":"Ensure 'payload' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":170,"description":"Potential use of undefined variable 'id'","suggestion":"Ensure 'id' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":171,"description":"Potential use of undefined variable 'zip'","suggestion":"Ensure 'zip' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":176,"description":"Potential use of undefined variable 'Exception'","suggestion":"Ensure 'Exception' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":179,"description":"Potential use of undefined variable 'str'","suggestion":"Ensure 'str' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":179,"description":"Potential use of undefined variable 'str'","suggestion":"Ensure 'str' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":186,"description":"Potential use of undefined variable 'isinstance'","suggestion":"Ensure 'isinstance' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":186,"description":"Potential use of undefined variable 'str'","suggestion":"Ensure 'str' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":245,"description":"Potential use of undefined variable 'Exception'","suggestion":"Ensure 'Exception' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":269,"description":"Potential use of undefined variable 'Exception'","suggestion":"Ensure 'Exception' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":299,"description":"Potential use of undefined variable 'AttributeError'","suggestion":"Ensure 'AttributeError' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":300,"description":"Potential use of undefined variable 'index'","suggestion":"Ensure 'index' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":290,"description":"Potential use of undefined variable 'str'","suggestion":"Ensure 'str' is defined before use","severity":"high","analyzer":"bugs"},{"type":"error","line":0,"description":"Error analyzing file: module 'ast' has no attribute 'Append'","suggestion":"Please check file content and format","severity":"high"}],"patch":"@@ -1,5 +1,6 @@\n import json\n import logging\n+import re\n from typing import List, Optional\n \n from pydantic import BaseModel\n@@ -12,6 +13,7 @@\n     from azure.search.documents import SearchClient\n     from azure.search.documents.indexes import SearchIndexClient\n     from azure.search.documents.indexes.models import (\n+        BinaryQuantizationCompression,\n         HnswAlgorithmConfiguration,\n         ScalarQuantizationCompression,\n         SearchField,\n@@ -24,7 +26,7 @@\n     from azure.search.documents.models import VectorizedQuery\n except ImportError:\n     raise ImportError(\n-        \"The 'azure-search-documents' library is required. Please install it using 'pip install azure-search-documents==11.5.1'.\"\n+        \"The 'azure-search-documents' library is required. Please install it using 'pip install azure-search-documents==11.5.2'.\"\n     )\n \n logger = logging.getLogger(__name__)\n@@ -37,43 +39,85 @@ class OutputData(BaseModel):\n \n \n class AzureAISearch(VectorStoreBase):\n-    def __init__(self, service_name, collection_name, api_key, embedding_model_dims, use_compression):\n-        \"\"\"Initialize the Azure Cognitive Search vector store.\n+    def __init__(\n+        self,\n+        service_name,\n+        collection_name,\n+        api_key,\n+        embedding_model_dims,\n+        compression_type: Optional[str] = None,  \n+        use_float16: bool = False,\n+    ):\n+        \"\"\"\n+        Initialize the Azure AI Search vector store.\n \n         Args:\n-            service_name (str): Azure Cognitive Search service name.\n+            service_name (str): Azure AI Search service name.\n             collection_name (str): Index name.\n-            api_key (str): API key for the Azure Cognitive Search service.\n+            api_key (str): API key for the Azure AI Search service.\n             embedding_model_dims (int): Dimension of the embedding vector.\n-            use_compression (bool): Use scalar quantization vector compression\n+            compression_type (Optional[str]): Specifies the type of quantization to use.\n+                Allowed values are None (no quantization), \"scalar\", or \"binary\".\n+            use_float16 (bool): Whether to store vectors in half precision (Edm.Half) or full precision (Edm.Single).\n+                (Note: This flag is preserved from the initial implementation per feedback.)\n         \"\"\"\n         self.index_name = collection_name\n         self.collection_name = collection_name\n         self.embedding_model_dims = embedding_model_dims\n-        self.use_compression = use_compression\n+        # If compression_type is None, treat it as \"none\".\n+        self.compression_type = (compression_type or \"none\").lower()  \n+        self.use_float16 = use_float16\n+\n         self.search_client = SearchClient(\n             endpoint=f\"https://{service_name}.search.windows.net\",\n             index_name=self.index_name,\n             credential=AzureKeyCredential(api_key),\n         )\n         self.index_client = SearchIndexClient(\n-            endpoint=f\"https://{service_name}.search.windows.net\", credential=AzureKeyCredential(api_key)\n+            endpoint=f\"https://{service_name}.search.windows.net\",\n+            credential=AzureKeyCredential(api_key),\n         )\n+\n+        self.search_client._client._config.user_agent_policy.add_user_agent(\"mem0\")\n+        self.index_client._client._config.user_agent_policy.add_user_agent(\"mem0\")\n+\n         self.create_col()  # create the collection / index\n \n     def create_col(self):\n-        \"\"\"Create a new index in Azure Cognitive Search.\"\"\"\n-        vector_dimensions = self.embedding_model_dims  # Set this to the number of dimensions in your vector\n-\n-        if self.use_compression:\n+        \"\"\"Create a new index in Azure AI Search.\"\"\"\n+        # Determine vector type based on use_float16 setting.\n+        if self.use_float16:\n             vector_type = \"Collection(Edm.Half)\"\n-            compression_name = \"myCompression\"\n-            compression_configurations = [ScalarQuantizationCompression(compression_name=compression_name)]\n         else:\n             vector_type = \"Collection(Edm.Single)\"\n-            compression_name = None\n-            compression_configurations = []\n \n+        # Configure compression settings based on the specified compression_type.\n+        compression_configurations = []\n+        compression_name = None\n+        if self.compression_type == \"scalar\":\n+            compression_name = \"myCompression\"\n+            # For SQ, rescoring defaults to True and oversampling defaults to 4.\n+            compression_configurations = [\n+                ScalarQuantizationCompression(\n+                    compression_name=compression_name\n+                    # rescoring defaults to True and oversampling defaults to 4\n+                )\n+            ]\n+        elif self.compression_type == \"binary\":\n+            compression_name = \"myCompression\"\n+            # For BQ, rescoring defaults to True and oversampling defaults to 10.\n+            compression_configurations = [\n+                BinaryQuantizationCompression(\n+                    compression_name=compression_name\n+                    # rescoring defaults to True and oversampling defaults to 10\n+                )\n+            ]\n+        # If no compression is desired, compression_configurations remains empty.\n+        \n+        # Note regarding hybrid search:\n+        # FEEDBACK (Discussion): We could store an additional \"text\" field for hybrid search (keeping the original text searchable)\n+        # but that would change the index design. This is not implemented here to avoid breaking changes.\n+        \n         fields = [\n             SimpleField(name=\"id\", type=SearchFieldDataType.String, key=True),\n             SimpleField(name=\"user_id\", type=SearchFieldDataType.String, filterable=True),\n@@ -82,16 +126,20 @@ def create_col(self):\n             SearchField(\n                 name=\"vector\",\n                 type=vector_type,\n-                searchable=True,\n-                vector_search_dimensions=vector_dimensions,\n+                searchable=True, \n+                vector_search_dimensions=self.embedding_model_dims,\n                 vector_search_profile_name=\"my-vector-config\",\n             ),\n             SimpleField(name=\"payload\", type=SearchFieldDataType.String, searchable=True),\n         ]\n \n         vector_search = VectorSearch(\n             profiles=[\n-                VectorSearchProfile(name=\"my-vector-config\", algorithm_configuration_name=\"my-algorithms-config\")\n+                VectorSearchProfile(\n+                    name=\"my-vector-config\",\n+                    algorithm_configuration_name=\"my-algorithms-config\",\n+                    compression_name=compression_name if self.compression_type != \"none\" else None\n+                )\n             ],\n             algorithms=[HnswAlgorithmConfiguration(name=\"my-algorithms-config\")],\n             compressions=compression_configurations,\n@@ -101,53 +149,63 @@ def create_col(self):\n \n     def _generate_document(self, vector, payload, id):\n         document = {\"id\": id, \"vector\": vector, \"payload\": json.dumps(payload)}\n-        # Extract additional fields if they exist\n+        # Extract additional fields if they exist.\n         for field in [\"user_id\", \"run_id\", \"agent_id\"]:\n             if field in payload:\n                 document[field] = payload[field]\n         return document\n \n+    # Note: Explicit \"insert\" calls may later be decoupled from memory management decisions.\n     def insert(self, vectors, payloads=None, ids=None):\n-        \"\"\"Insert vectors into the index.\n+        \"\"\"\n+        Insert vectors into the index.\n \n         Args:\n             vectors (List[List[float]]): List of vectors to insert.\n             payloads (List[Dict], optional): List of payloads corresponding to vectors.\n             ids (List[str], optional): List of IDs corresponding to vectors.\n         \"\"\"\n         logger.info(f\"Inserting {len(vectors)} vectors into index {self.index_name}\")\n-\n         documents = [\n             self._generate_document(vector, payload, id)\n             for id, vector, payload in zip(ids, vectors, payloads)\n         ]\n-        self.search_client.upload_documents(documents)\n+        response = self.search_client.upload_documents(documents)\n+        for doc in response:\n+            if not doc.get(\"status\", False):\n+                raise Exception(f\"Insert failed for document {doc.get('id')}: {doc}\")\n+        return response\n+\n+    def _sanitize_key(self, key: str) -> str:\n+        return re.sub(r\"[^\\w]\", \"\", key)\n \n     def _build_filter_expression(self, filters):\n         filter_conditions = []\n         for key, value in filters.items():\n-            # If the value is a string, add quotes\n+            safe_key = self._sanitize_key(key)\n             if isinstance(value, str):\n-                condition = f\"{key} eq '{value}'\"\n+                safe_value = value.replace(\"'\", \"''\")\n+                condition = f\"{safe_key} eq '{safe_value}'\"\n             else:\n-                condition = f\"{key} eq {value}\"\n+                condition = f\"{safe_key} eq {value}\"\n             filter_conditions.append(condition)\n-        # Use 'and' to join multiple conditions\n-        filter_expression = ' and '.join(filter_conditions)\n+        filter_expression = \" and \".join(filter_conditions)\n         return filter_expression\n \n-    def search(self, query, limit=5, filters=None):\n-        \"\"\"Search for similar vectors.\n+    def search(self, query, limit=5, filters=None, vector_filter_mode=\"preFilter\"):\n+        \"\"\"\n+        Search for similar vectors.\n \n         Args:\n-            query (List[float]): Query vectors.\n+            query (List[float]): Query vector.\n             limit (int, optional): Number of results to return. Defaults to 5.\n             filters (Dict, optional): Filters to apply to the search. Defaults to None.\n+            vector_filter_mode (str): Determines whether filters are applied before or after the vector search.\n+                Known values: \"preFilter\" (default) and \"postFilter\".\n \n         Returns:\n-            list: Search results.\n+            List[OutputData]: Search results.\n         \"\"\"\n-        # Build filter expression\n         filter_expression = None\n         if filters:\n             filter_expression = self._build_filter_expression(filters)\n@@ -158,26 +216,39 @@ def search(self, query, limit=5, filters=None):\n         search_results = self.search_client.search(\n             vector_queries=[vector_query],\n             filter=filter_expression,\n-            top=limit\n+            top=limit,\n+            vector_filter_mode=vector_filter_mode,  # FEEDBACK 3: New parameter for filter mode.\n         )\n \n         results = []\n         for result in search_results:\n             payload = json.loads(result[\"payload\"])\n-            results.append(OutputData(id=result[\"id\"], score=result[\"@search.score\"], payload=payload))\n+            results.append(\n+                OutputData(\n+                    id=result[\"id\"], score=result[\"@search.score\"], payload=payload\n+                )\n+            )\n+        # FEEDBACK 5/6: Return the list of results directly.\n         return results\n \n     def delete(self, vector_id):\n-        \"\"\"Delete a vector by ID.\n+        \"\"\"\n+        Delete a vector by ID.\n \n         Args:\n             vector_id (str): ID of the vector to delete.\n         \"\"\"\n-        self.search_client.delete_documents(documents=[{\"id\": vector_id}])\n+        response = self.search_client.delete_documents(documents=[{\"id\": vector_id}])\n+        # FEEDBACK 6: Check delete response; throw an exception if any deletion failed.\n+        for doc in response:\n+            if not doc.get(\"status\", False):\n+                raise Exception(f\"Delete failed for document {vector_id}: {doc}\")\n         logger.info(f\"Deleted document with ID '{vector_id}' from index '{self.index_name}'.\")\n+        return response\n \n     def update(self, vector_id, vector=None, payload=None):\n-        \"\"\"Update a vector and its payload.\n+        \"\"\"\n+        Update a vector and its payload.\n \n         Args:\n             vector_id (str): ID of the vector to update.\n@@ -192,10 +263,15 @@ def update(self, vector_id, vector=None, payload=None):\n             document[\"payload\"] = json_payload\n             for field in [\"user_id\", \"run_id\", \"agent_id\"]:\n                 document[field] = payload.get(field)\n-        self.search_client.merge_or_upload_documents(documents=[document])\n+        response = self.search_client.merge_or_upload_documents(documents=[document])\n+        for doc in response:\n+            if not doc.get(\"status\", False):\n+                raise Exception(f\"Update failed for document {vector_id}: {doc}\")\n+        return response\n \n     def get(self, vector_id) -> OutputData:\n-        \"\"\"Retrieve a vector by ID.\n+        \"\"\"\n+        Retrieve a vector by ID.\n \n         Args:\n             vector_id (str): ID of the vector to retrieve.\n@@ -207,35 +283,43 @@ def get(self, vector_id) -> OutputData:\n             result = self.search_client.get_document(key=vector_id)\n         except ResourceNotFoundError:\n             return None\n-        return OutputData(id=result[\"id\"], score=None, payload=json.loads(result[\"payload\"]))\n+        return OutputData(\n+            id=result[\"id\"], score=None, payload=json.loads(result[\"payload\"])\n+        )\n \n     def list_cols(self) -> List[str]:\n-        \"\"\"List all collections (indexes).\n+        \"\"\"\n+        List all collections (indexes).\n \n         Returns:\n             List[str]: List of index names.\n         \"\"\"\n-        indexes = self.index_client.list_indexes()\n-        return [index.name for index in indexes]\n+        try:\n+            names = self.index_client.list_index_names()\n+        except AttributeError:\n+            names = [index.name for index in self.index_client.list_indexes()]\n+        return names\n \n     def delete_col(self):\n         \"\"\"Delete the index.\"\"\"\n         self.index_client.delete_index(self.index_name)\n \n     def col_info(self):\n-        \"\"\"Get information about the index.\n+        \"\"\"\n+        Get information about the index.\n \n         Returns:\n-            Dict[str, Any]: Index information.\n+            dict: Index information.\n         \"\"\"\n         index = self.index_client.get_index(self.index_name)\n         return {\"name\": index.name, \"fields\": index.fields}\n \n     def list(self, filters=None, limit=100):\n-        \"\"\"List all vectors in the index.\n+        \"\"\"\n+        List all vectors in the index.\n \n         Args:\n-            filters (Dict, optional): Filters to apply to the list.\n+            filters (dict, optional): Filters to apply to the list.\n             limit (int, optional): Number of vectors to return. Defaults to 100.\n \n         Returns:\n@@ -246,16 +330,17 @@ def list(self, filters=None, limit=100):\n             filter_expression = self._build_filter_expression(filters)\n \n         search_results = self.search_client.search(\n-            search_text=\"*\",\n-            filter=filter_expression,\n-            top=limit\n+            search_text=\"*\", filter=filter_expression, top=limit\n         )\n         results = []\n         for result in search_results:\n             payload = json.loads(result[\"payload\"])\n-            results.append(OutputData(id=result[\"id\"], score=result[\"@search.score\"], payload=payload))\n-\n-        return [results]\n+            results.append(\n+                OutputData(\n+                    id=result[\"id\"], score=result[\"@search.score\"], payload=payload\n+                )\n+            )\n+        return results\n \n     def __del__(self):\n         \"\"\"Close the search client when the object is deleted.\"\"\""},{"name":"poetry.lock","issues":[],"patch":"@@ -1,4 +1,4 @@\n-# This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.\n+# This file is automatically @generated by Poetry 1.7.1 and should not be changed by hand.\n \n [[package]]\n name = \"aiohappyeyeballs\"\n@@ -186,6 +186,53 @@ docs = [\"cogapp\", \"furo\", \"myst-parser\", \"sphinx\", \"sphinx-notfound-page\", \"sphi\n tests = [\"cloudpickle\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]\n tests-mypy = [\"mypy (>=1.11.1)\", \"pytest-mypy-plugins\"]\n \n+[[package]]\n+name = \"azure-common\"\n+version = \"1.1.28\"\n+description = \"Microsoft Azure Client Library for Python (Common)\"\n+optional = false\n+python-versions = \"*\"\n+files = [\n+    {file = \"azure-common-1.1.28.zip\", hash = \"sha256:4ac0cd3214e36b6a1b6a442686722a5d8cc449603aa833f3f0f40bda836704a3\"},\n+    {file = \"azure_common-1.1.28-py2.py3-none-any.whl\", hash = \"sha256:5c12d3dcf4ec20599ca6b0d3e09e86e146353d443e7fcc050c9a19c1f9df20ad\"},\n+]\n+\n+[[package]]\n+name = \"azure-core\"\n+version = \"1.32.0\"\n+description = \"Microsoft Azure Core Library for Python\"\n+optional = false\n+python-versions = \">=3.8\"\n+files = [\n+    {file = \"azure_core-1.32.0-py3-none-any.whl\", hash = \"sha256:eac191a0efb23bfa83fddf321b27b122b4ec847befa3091fa736a5c32c50d7b4\"},\n+    {file = \"azure_core-1.32.0.tar.gz\", hash = \"sha256:22b3c35d6b2dae14990f6c1be2912bf23ffe50b220e708a28ab1bb92b1c730e5\"},\n+]\n+\n+[package.dependencies]\n+requests = \">=2.21.0\"\n+six = \">=1.11.0\"\n+typing-extensions = \">=4.6.0\"\n+\n+[package.extras]\n+aio = [\"aiohttp (>=3.0)\"]\n+\n+[[package]]\n+name = \"azure-search-documents\"\n+version = \"11.5.2\"\n+description = \"Microsoft Azure Cognitive Search Client Library for Python\"\n+optional = false\n+python-versions = \">=3.8\"\n+files = [\n+    {file = \"azure_search_documents-11.5.2-py3-none-any.whl\", hash = \"sha256:c949d011008a4b0bcee3db91132741b4e4d50ddb3f7e2f48944d949d4b413b11\"},\n+    {file = \"azure_search_documents-11.5.2.tar.gz\", hash = \"sha256:98977dd1fa4978d3b7d8891a0856b3becb6f02cc07ff2e1ea40b9c7254ada315\"},\n+]\n+\n+[package.dependencies]\n+azure-common = \">=1.1\"\n+azure-core = \">=1.28.0\"\n+isodate = \">=0.6.0\"\n+typing-extensions = \">=4.6.0\"\n+\n [[package]]\n name = \"backoff\"\n version = \"2.2.1\"\n@@ -813,6 +860,17 @@ files = [\n     {file = \"iniconfig-2.0.0.tar.gz\", hash = \"sha256:2d91e135bf72d31a410b17c16da610a82cb55f6b0477d1a902134b24a455b8b3\"},\n ]\n \n+[[package]]\n+name = \"isodate\"\n+version = \"0.7.2\"\n+description = \"An ISO 8601 date/time/duration parser and formatter\"\n+optional = false\n+python-versions = \">=3.7\"\n+files = [\n+    {file = \"isodate-0.7.2-py3-none-any.whl\", hash = \"sha256:28009937d8031054830160fce6d409ed342816b543597cece116d966c6d99e15\"},\n+    {file = \"isodate-0.7.2.tar.gz\", hash = \"sha256:4cd1aa0f43ca76f4a6c6c0292a85f40b35ec2e43e315b59f06e6d32171a953e6\"},\n+]\n+\n [[package]]\n name = \"isort\"\n version = \"5.13.2\"\n@@ -2397,4 +2455,4 @@ graph = [\"langchain-community\", \"neo4j\", \"rank-bm25\"]\n [metadata]\n lock-version = \"2.0\"\n python-versions = \">=3.9,<4.0\"\n-content-hash = \"6dba8e3091ed9a081a2035313e674206e2bee10072cb5c0ce6fb407686ce5156\"\n+content-hash = \"91b6996f9590235d0a4c6504cb4b9aafe68a3161e204a0fd9ea11b2a0c467cc1\""},{"name":"tests/vector_stores/test_azure_ai_search.py","issues":[{"type":"style","line":10,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"best_practice","line":12,"description":"Function 'mock_clients' lacks a docstring","suggestion":"Add a docstring to document the function's purpose, parameters, and return value","severity":"low","analyzer":"best_practices"},{"type":"style","line":13,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":14,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":14,"description":"Incorrect indentation. Use multiples of 4 spaces","suggestion":"Fix indentation to use 4 spaces per level","severity":"low","analyzer":"style"},{"type":"style","line":20,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":22,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":25,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":27,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":35,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"best_practice","line":45,"description":"Function 'azure_ai_search_instance' lacks a docstring","suggestion":"Add a docstring to document the function's purpose, parameters, and return value","severity":"low","analyzer":"best_practices"},{"type":"best_practice","line":59,"description":"Function 'test_create_col' lacks a docstring","suggestion":"Add a docstring to document the function's purpose, parameters, and return value","severity":"low","analyzer":"best_practices"},{"type":"best_practice","line":65,"description":"Function 'test_insert' lacks a docstring","suggestion":"Add a docstring to document the function's purpose, parameters, and return value","severity":"low","analyzer":"best_practices"},{"type":"best_practice","line":87,"description":"Function 'test_search_preFilter' lacks a docstring","suggestion":"Add a docstring to document the function's purpose, parameters, and return value","severity":"low","analyzer":"best_practices"},{"type":"style","line":99,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":101,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"bug","line":107,"description":"Potential use of undefined variable 'len'","suggestion":"Ensure 'len' is defined before use","severity":"high","analyzer":"bugs"},{"type":"best_practice","line":112,"description":"Function 'test_search_postFilter' lacks a docstring","suggestion":"Add a docstring to document the function's purpose, parameters, and return value","severity":"low","analyzer":"best_practices"},{"type":"style","line":123,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"bug","line":129,"description":"Potential use of undefined variable 'len'","suggestion":"Ensure 'len' is defined before use","severity":"high","analyzer":"bugs"},{"type":"best_practice","line":134,"description":"Function 'test_delete' lacks a docstring","suggestion":"Add a docstring to document the function's purpose, parameters, and return value","severity":"low","analyzer":"best_practices"},{"type":"style","line":138,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":140,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"best_practice","line":142,"description":"Function 'test_update' lacks a docstring","suggestion":"Add a docstring to document the function's purpose, parameters, and return value","severity":"low","analyzer":"best_practices"},{"type":"style","line":147,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"style","line":148,"description":"Line exceeds maximum length of 79 characters","suggestion":"Break the line into multiple lines or use line continuation","severity":"low","analyzer":"style"},{"type":"best_practice","line":159,"description":"Function 'test_get' lacks a docstring","suggestion":"Add a docstring to document the function's purpose, parameters, and return value","severity":"low","analyzer":"best_practices"},{"type":"best_practice","line":172,"description":"Function 'test_list' lacks a docstring","suggestion":"Add a docstring to document the function's purpose, parameters, and return value","severity":"low","analyzer":"best_practices"},{"type":"bug","line":189,"description":"Potential use of undefined variable 'isinstance'","suggestion":"Ensure 'isinstance' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":189,"description":"Potential use of undefined variable 'list'","suggestion":"Ensure 'list' is defined before use","severity":"high","analyzer":"bugs"},{"type":"bug","line":190,"description":"Potential use of undefined variable 'len'","suggestion":"Ensure 'len' is defined before use","severity":"high","analyzer":"bugs"}],"patch":"@@ -0,0 +1,191 @@\n+import json\n+from unittest.mock import Mock, patch\n+\n+import pytest\n+\n+# Import the AzureAISearch class and OutputData model from your module.\n+from mem0.vector_stores.azure_ai_search import AzureAISearch\n+\n+\n+# Fixture to patch SearchClient and SearchIndexClient and create an instance of AzureAISearch.\n+@pytest.fixture\n+def mock_clients():\n+    with patch(\"mem0.vector_stores.azure_ai_search.SearchClient\") as MockSearchClient, \\\n+         patch(\"mem0.vector_stores.azure_ai_search.SearchIndexClient\") as MockIndexClient:\n+        # Create mocked instances for search and index clients.\n+        mock_search_client = MockSearchClient.return_value\n+        mock_index_client = MockIndexClient.return_value\n+\n+        # Stub required methods on search_client.\n+        # FEEDBACK: Set default return values for methods that are iterated over.\n+        mock_search_client.upload_documents = Mock()\n+        mock_search_client.upload_documents.return_value = [{\"status\": True, \"id\": \"doc1\"}]\n+        mock_search_client.search = Mock()\n+        mock_search_client.delete_documents = Mock()\n+        mock_search_client.delete_documents.return_value = [{\"status\": True, \"id\": \"doc1\"}]\n+        mock_search_client.merge_or_upload_documents = Mock()\n+        mock_search_client.merge_or_upload_documents.return_value = [{\"status\": True, \"id\": \"doc1\"}]\n+        mock_search_client.get_document = Mock()\n+        mock_search_client.close = Mock()\n+\n+        # Stub required methods on index_client.\n+        mock_index_client.create_or_update_index = Mock()\n+        mock_index_client.list_indexes = Mock(return_value=[])\n+        mock_index_client.delete_index = Mock()\n+        # For col_info() we assume get_index returns an object with name and fields attributes.\n+        fake_index = Mock()\n+        fake_index.name = \"test-index\"\n+        fake_index.fields = [\"id\", \"vector\", \"payload\"]\n+        mock_index_client.get_index = Mock(return_value=fake_index)\n+        mock_index_client.close = Mock()\n+\n+        yield mock_search_client, mock_index_client\n+\n+@pytest.fixture\n+def azure_ai_search_instance(mock_clients):\n+    mock_search_client, mock_index_client = mock_clients\n+    # Create an instance with dummy parameters.\n+    instance = AzureAISearch(\n+        service_name=\"test-service\",\n+        collection_name=\"test-index\",\n+        api_key=\"test-api-key\",\n+        embedding_model_dims=3,\n+        compression_type=\"binary\",  # testing binary quantization option\n+        use_float16=True\n+    )\n+    # Return instance and clients for verification.\n+    return instance, mock_search_client, mock_index_client\n+\n+def test_create_col(azure_ai_search_instance):\n+    instance, mock_search_client, mock_index_client = azure_ai_search_instance\n+    # Upon initialization, create_col should be called.\n+    mock_index_client.create_or_update_index.assert_called_once()\n+    # Optionally, you could inspect the call arguments for vector type.\n+\n+def test_insert(azure_ai_search_instance):\n+    instance, mock_search_client, _ = azure_ai_search_instance\n+    vectors = [[0.1, 0.2, 0.3]]\n+    payloads = [{\"user_id\": \"user1\", \"run_id\": \"run1\"}]\n+    ids = [\"doc1\"]\n+\n+    # FEEDBACK: The upload_documents method is now set to return an iterable.\n+    instance.insert(vectors, payloads, ids)\n+\n+    mock_search_client.upload_documents.assert_called_once()\n+    args, _ = mock_search_client.upload_documents.call_args\n+    documents = args[0]\n+    # Update expected_doc to include extra fields from payload.\n+    expected_doc = {\n+        \"id\": \"doc1\",\n+        \"vector\": [0.1, 0.2, 0.3],\n+        \"payload\": json.dumps({\"user_id\": \"user1\", \"run_id\": \"run1\"}),\n+        \"user_id\": \"user1\",\n+        \"run_id\": \"run1\"\n+    }\n+    assert documents[0] == expected_doc\n+\n+def test_search_preFilter(azure_ai_search_instance):\n+    instance, mock_search_client, _ = azure_ai_search_instance\n+    # Setup a fake search result returned by the mocked search method.\n+    fake_result = {\n+        \"id\": \"doc1\",\n+        \"@search.score\": 0.95,\n+        \"payload\": json.dumps({\"user_id\": \"user1\"})\n+    }\n+    # Configure the mock to return an iterator (list) with fake_result.\n+    mock_search_client.search.return_value = [fake_result]\n+\n+    query_vector = [0.1, 0.2, 0.3]\n+    results = instance.search(query_vector, limit=1, filters={\"user_id\": \"user1\"}, vector_filter_mode=\"preFilter\")\n+\n+    # Verify that the search method was called with vector_filter_mode=\"preFilter\".\n+    mock_search_client.search.assert_called_once()\n+    _, called_kwargs = mock_search_client.search.call_args\n+    assert called_kwargs.get(\"vector_filter_mode\") == \"preFilter\"\n+\n+    # Verify that the output is parsed correctly.\n+    assert len(results) == 1\n+    assert results[0].id == \"doc1\"\n+    assert results[0].score == 0.95\n+    assert results[0].payload == {\"user_id\": \"user1\"}\n+\n+def test_search_postFilter(azure_ai_search_instance):\n+    instance, mock_search_client, _ = azure_ai_search_instance\n+    # Setup a fake search result for postFilter.\n+    fake_result = {\n+        \"id\": \"doc2\",\n+        \"@search.score\": 0.85,\n+        \"payload\": json.dumps({\"user_id\": \"user2\"})\n+    }\n+    mock_search_client.search.return_value = [fake_result]\n+\n+    query_vector = [0.4, 0.5, 0.6]\n+    results = instance.search(query_vector, limit=1, filters={\"user_id\": \"user2\"}, vector_filter_mode=\"postFilter\")\n+\n+    mock_search_client.search.assert_called_once()\n+    _, called_kwargs = mock_search_client.search.call_args\n+    assert called_kwargs.get(\"vector_filter_mode\") == \"postFilter\"\n+\n+    assert len(results) == 1\n+    assert results[0].id == \"doc2\"\n+    assert results[0].score == 0.85\n+    assert results[0].payload == {\"user_id\": \"user2\"}\n+\n+def test_delete(azure_ai_search_instance):\n+    instance, mock_search_client, _ = azure_ai_search_instance\n+    vector_id = \"doc1\"\n+    # Set delete_documents to return an iterable with a successful response.\n+    mock_search_client.delete_documents.return_value = [{\"status\": True, \"id\": vector_id}]\n+    instance.delete(vector_id)\n+    mock_search_client.delete_documents.assert_called_once_with(documents=[{\"id\": vector_id}])\n+\n+def test_update(azure_ai_search_instance):\n+    instance, mock_search_client, _ = azure_ai_search_instance\n+    vector_id = \"doc1\"\n+    new_vector = [0.7, 0.8, 0.9]\n+    new_payload = {\"user_id\": \"updated\"}\n+    # Set merge_or_upload_documents to return an iterable with a successful response.\n+    mock_search_client.merge_or_upload_documents.return_value = [{\"status\": True, \"id\": vector_id}]\n+    instance.update(vector_id, vector=new_vector, payload=new_payload)\n+    mock_search_client.merge_or_upload_documents.assert_called_once()\n+    kwargs = mock_search_client.merge_or_upload_documents.call_args.kwargs\n+    document = kwargs[\"documents\"][0]\n+    assert document[\"id\"] == vector_id\n+    assert document[\"vector\"] == new_vector\n+    assert document[\"payload\"] == json.dumps(new_payload)\n+    # The update method will also add the 'user_id' field.\n+    assert document[\"user_id\"] == \"updated\"\n+\n+def test_get(azure_ai_search_instance):\n+    instance, mock_search_client, _ = azure_ai_search_instance\n+    fake_result = {\n+        \"id\": \"doc1\",\n+        \"payload\": json.dumps({\"user_id\": \"user1\"})\n+    }\n+    mock_search_client.get_document.return_value = fake_result\n+    result = instance.get(\"doc1\")\n+    mock_search_client.get_document.assert_called_once_with(key=\"doc1\")\n+    assert result.id == \"doc1\"\n+    assert result.payload == {\"user_id\": \"user1\"}\n+    assert result.score is None\n+\n+def test_list(azure_ai_search_instance):\n+    instance, mock_search_client, _ = azure_ai_search_instance\n+    fake_result = {\n+        \"id\": \"doc1\",\n+        \"@search.score\": 0.99,\n+        \"payload\": json.dumps({\"user_id\": \"user1\"})\n+    }\n+    mock_search_client.search.return_value = [fake_result]\n+    # Call list with a simple filter.\n+    results = instance.list(filters={\"user_id\": \"user1\"}, limit=1)\n+    # Verify the search method was called with the proper parameters.\n+    expected_filter = instance._build_filter_expression({\"user_id\": \"user1\"})\n+    mock_search_client.search.assert_called_once_with(\n+        search_text=\"*\",\n+        filter=expected_filter,\n+        top=1\n+    )\n+    assert isinstance(results, list)\n+    assert len(results) == 1\n+    assert results[0].id == \"doc1\""}],"summary":{"total_files":3,"total_issues":96,"critical_issues":29,"issues_by_type":{"style":57,"bug":28,"performance":0,"best_practice":10,"error":1}}}